##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  < 
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
setw -g mode-keys vi

# Reset Prefix
set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions

set-option -g history-limit 10000

# colors
setw -g mode-bg black
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"
set-option -g pane-active-border-fg green

# utf8 support
set-window-option -g utf8 on


# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse

# No delay for escape key press
set -sg escape-time 0

# Automatically set window title
setw -g automatic-rename off

#setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
#set -g mouse-select-pane on
set -g mouse on
set -g history-limit 30000
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
#set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-bg black
set-option -g status-fg cyan
set-option -g status-interval 5
set-option -g status-left-length 30
set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#T#[default]'
# set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d ',' -f 2)#[default]'
set-option -g status-right ''
set-option -g visual-activity on

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
unbind [ # copy mode bound to escape key
unbind j
unbind l
unbind p
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

bind Escape copy-mode


#vim like copy w/ clipboard 
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
bind-key p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"

# new split in current pane (horizontal / vertical)
#bind-key c split-window -v # split pane horizontally
#bind-key v split-window -h # split pane vertically
bind-key - split-window -v # split pane horizontally
bind-key | split-window -h # split pane vertically

# list panes
#bind-key Space list-panes

# break-pane
bind-key Enter break-pane

bind-key Enter break-pane

bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
bind-key -n C-up prev
bind-key -n C-left prev

#next pane
bind-key -n C-right next
bind-key -n C-down next

############################################################################
# windows
############################################################################
set-window-option -g window-status-current-bg red
set-window-option -g window-status-current-fg black
bind k previous-window
bind h previous-window
bind j next-window
bind l next-window
bind-key C-a last-window # C-a C-a for last active window
bind a command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
#bind-key h select-pane -L
#bind-key j select-pane -D
#bind-key k select-pane -U
#bind-key l select-pane -R
bind-key C-h select-pane -L
bind-key C-j select-pane -D
bind-key C-k select-pane -U
bind-key C-l select-pane -R

# Resizing ---------------------------------------------------------------
#bind-key C-h resize-pane -L
#bind-key C-j resize-pane -D
#bind-key C-k resize-pane -U
#bind-key C-l resize-pane -R

# use vim motion keys while in copy mode
setw -g mode-keys vi

############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window


# focus on first window
# select-window -t 0
